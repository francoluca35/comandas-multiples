// Script para debuggear el estado de autenticaci√≥n
console.log("üîç Iniciando debug de estado de autenticaci√≥n...");

// Funci√≥n para verificar estado completo
const checkAuthState = () => {
  console.log("üìã ESTADO DE AUTENTICACI√ìN");
  console.log("==========================");
  
  // Verificar localStorage
  const localStorageData = {
    usuario: localStorage.getItem("usuario"),
    nombreCompleto: localStorage.getItem("nombreCompleto"),
    restauranteId: localStorage.getItem("restauranteId"),
    usuarioId: localStorage.getItem("usuarioId"),
    rol: localStorage.getItem("rol"),
    userImage: localStorage.getItem("userImage"),
    imagen: localStorage.getItem("imagen"),
    nombreResto: localStorage.getItem("nombreResto"),
    codActivacion: localStorage.getItem("codActivacion"),
    emailResto: localStorage.getItem("emailResto"),
    cantUsuarios: localStorage.getItem("cantUsuarios"),
    finanzas: localStorage.getItem("finanzas"),
    logo: localStorage.getItem("logo")
  };
  
  console.log("üì¶ localStorage:", localStorageData);
  
  // Verificar URL actual
  console.log("üåê URL actual:", window.location.href);
  console.log("üìç Pathname:", window.location.pathname);
  
  // Verificar si estamos en sistema de restaurantes
  const isRestaurantSystem = window.location.pathname.includes("/home-comandas");
  console.log("üè™ Sistema de restaurantes:", isRestaurantSystem);
  
  // Verificar estado de turno
  const turnoInfo = localStorage.getItem("turnoInfo");
  console.log("‚è∞ Info de turno:", turnoInfo ? JSON.parse(turnoInfo) : null);
  
  // Verificar si hay usuario autenticado
  const hasUser = localStorageData.usuario && localStorageData.usuarioId && localStorageData.nombreCompleto;
  console.log("üë§ Usuario autenticado:", hasUser ? "‚úÖ S√ç" : "‚ùå NO");
  
  if (hasUser) {
    console.log("‚úÖ Datos de usuario completos:");
    console.log(`   - Usuario: ${localStorageData.usuario}`);
    console.log(`   - Nombre completo: ${localStorageData.nombreCompleto}`);
    console.log(`   - ID: ${localStorageData.usuarioId}`);
    console.log(`   - Rol: ${localStorageData.rol}`);
    console.log(`   - Restaurante: ${localStorageData.restauranteId}`);
  } else {
    console.log("‚ùå Datos faltantes:");
    if (!localStorageData.usuario) console.log("   - usuario");
    if (!localStorageData.usuarioId) console.log("   - usuarioId");
    if (!localStorageData.nombreCompleto) console.log("   - nombreCompleto");
  }
  
  return {
    hasUser,
    localStorageData,
    isRestaurantSystem,
    turnoInfo: turnoInfo ? JSON.parse(turnoInfo) : null
  };
};

// Funci√≥n para simular login
const simulateLogin = () => {
  console.log("üîÑ Simulando datos de login...");
  
  // Establecer datos de usuario
  localStorage.setItem("usuario", "test_user");
  localStorage.setItem("nombreCompleto", "Usuario de Prueba");
  localStorage.setItem("usuarioId", "test_id_123");
  localStorage.setItem("rol", "admin");
  localStorage.setItem("restauranteId", "test_restaurant");
  localStorage.setItem("userImage", "");
  localStorage.setItem("imagen", "");
  
  console.log("‚úÖ Datos de login simulados");
  checkAuthState();
};

// Funci√≥n para limpiar datos
const clearAuthData = () => {
  console.log("üßπ Limpiando datos de autenticaci√≥n...");
  
  const keysToRemove = [
    "usuario",
    "nombreCompleto", 
    "usuarioId",
    "rol",
    "restauranteId",
    "userImage",
    "imagen",
    "turnoInfo"
  ];
  
  keysToRemove.forEach(key => {
    localStorage.removeItem(key);
  });
  
  console.log("‚úÖ Datos de autenticaci√≥n limpiados");
  checkAuthState();
};

// Funci√≥n para verificar AuthContext
const checkAuthContext = () => {
  console.log("üîç Verificando AuthContext...");
  
  // Intentar acceder al contexto de autenticaci√≥n
  try {
    // Esto solo funcionar√° si el componente est√° montado
    console.log("‚ö†Ô∏è AuthContext solo puede verificarse desde un componente React");
    console.log("üí° Usa checkAuthState() para verificar localStorage directamente");
  } catch (error) {
    console.log("‚ùå Error accediendo a AuthContext:", error.message);
  }
};

// Funci√≥n para verificar TurnoContext
const checkTurnoContext = () => {
  console.log("üîç Verificando TurnoContext...");
  
  const turnoInfo = localStorage.getItem("turnoInfo");
  if (turnoInfo) {
    const turno = JSON.parse(turnoInfo);
    console.log("‚è∞ Estado del turno:", turno);
    console.log(`   - Abierto: ${turno.abierto ? "‚úÖ S√ç" : "‚ùå NO"}`);
    console.log(`   - Usuario: ${turno.usuario}`);
    console.log(`   - Hora apertura: ${turno.horaApertura}`);
    console.log(`   - Restaurante: ${turno.restauranteId}`);
  } else {
    console.log("‚ùå No hay informaci√≥n de turno");
  }
};

// Funci√≥n para forzar recarga de AuthContext
const forceAuthRefresh = () => {
  console.log("üîÑ Forzando recarga de AuthContext...");
  
  // Disparar evento personalizado para que AuthContext se actualice
  window.dispatchEvent(new CustomEvent('authRefresh'));
  
  // Tambi√©n recargar la p√°gina si es necesario
  console.log("üí° Si el problema persiste, considera recargar la p√°gina");
};

// Funci√≥n para verificar si el problema es de sincronizaci√≥n
const checkSyncIssues = () => {
  console.log("üîç Verificando problemas de sincronizaci√≥n...");
  
  const state = checkAuthState();
  
  if (state.hasUser) {
    console.log("‚úÖ Usuario autenticado correctamente");
    console.log("üí° El problema puede ser de sincronizaci√≥n entre AuthContext y localStorage");
    console.log("üí° TurnoContext ahora usa localStorage directamente");
  } else {
    console.log("‚ùå Usuario no autenticado");
    console.log("üí° Verifica que el login se complet√≥ correctamente");
  }
};

// Exportar funciones para uso manual
if (typeof window !== "undefined") {
  window.authDebug = {
    checkAuthState,
    simulateLogin,
    clearAuthData,
    checkAuthContext,
    checkTurnoContext,
    forceAuthRefresh,
    checkSyncIssues
  };
  
  console.log("üîß Funciones de debug disponibles:");
  console.log("  - window.authDebug.checkAuthState()");
  console.log("  - window.authDebug.simulateLogin()");
  console.log("  - window.authDebug.clearAuthData()");
  console.log("  - window.authDebug.checkAuthContext()");
  console.log("  - window.authDebug.checkTurnoContext()");
  console.log("  - window.authDebug.forceAuthRefresh()");
  console.log("  - window.authDebug.checkSyncIssues()");
}

// Verificar estado inicial autom√°ticamente
checkAuthState();
