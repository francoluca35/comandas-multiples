// Script de prueba para el sistema de notificaciones de cocina en tiempo real
// Ejecutar en la consola del navegador en la p√°gina de cocina

console.log("üß™ Iniciando pruebas del sistema de notificaciones de cocina en tiempo real...");

// Funci√≥n para simular un nuevo pedido
function simularNuevoPedido() {
  console.log("üìù Simulando nuevo pedido...");
  
  const restauranteId = localStorage.getItem("restauranteId");
  if (!restauranteId) {
    console.error("‚ùå No se encontr√≥ restauranteId en localStorage");
    return;
  }

  const pedidoPrueba = {
    restauranteId: restauranteId,
    mesa: "MESA PRUEBA",
    productos: [
      {
        nombre: "Hamburguesa de Prueba",
        cantidad: 2,
        precio: 1500,
        notas: "Sin cebolla"
      },
      {
        nombre: "Papas Fritas",
        cantidad: 1,
        precio: 800,
        notas: ""
      }
    ],
    total: 3800,
    cliente: "Cliente de Prueba",
    notas: "Pedido de prueba para verificar notificaciones en tiempo real",
    tipo: "salon"
  };

  fetch("/api/pedidos-cocina", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(pedidoPrueba),
  })
  .then(response => response.json())
  .then(data => {
    console.log("‚úÖ Pedido de prueba creado:", data);
    console.log("üîî Deber√≠a activarse la notificaci√≥n INSTANT√ÅNEAMENTE...");
    console.log("üì° Verificar que el indicador de conexi√≥n SSE est√© verde");
  })
  .catch(error => {
    console.error("‚ùå Error creando pedido de prueba:", error);
  });
}

// Funci√≥n para verificar el estado del sistema
function verificarEstadoSistema() {
  console.log("üîç Verificando estado del sistema de tiempo real...");
  
  // Verificar localStorage
  const restauranteId = localStorage.getItem("restauranteId");
  console.log("üìç RestauranteId:", restauranteId ? "‚úÖ Encontrado" : "‚ùå No encontrado");
  
  // Verificar si estamos en la p√°gina de cocina
  const enCocina = window.location.pathname.includes('/cocina');
  console.log("üç≥ En p√°gina de cocina:", enCocina ? "‚úÖ S√≠" : "‚ùå No");
  
  // Verificar si hay pedidos cargados
  const pedidosElements = document.querySelectorAll('[data-pedido-id]');
  console.log("üìä Pedidos en DOM:", pedidosElements.length);
  
  // Verificar indicador de conexi√≥n SSE
  const connectionIndicator = document.querySelector('.animate-pulse');
  const connectionText = document.querySelector('span');
  console.log("üì° Indicador de conexi√≥n SSE:", connectionIndicator ? "‚úÖ Encontrado" : "‚ùå No encontrado");
  
  if (connectionText) {
    const connectionStatus = connectionText.textContent;
    console.log("üîå Estado de conexi√≥n:", connectionStatus);
    
    if (connectionStatus.includes("Conectado en tiempo real")) {
      console.log("‚úÖ Sistema SSE funcionando correctamente");
    } else if (connectionStatus.includes("Conectando")) {
      console.log("üü° Sistema SSE conectando...");
    } else if (connectionStatus.includes("Error")) {
      console.log("‚ùå Error en conexi√≥n SSE");
    } else {
      console.log("‚ùì Estado de conexi√≥n desconocido");
    }
  }
  
  // Verificar bot√≥n de prueba de sonido
  const testButton = Array.from(document.querySelectorAll('button')).find(btn => 
    btn.textContent.includes('Probar Sonido')
  );
  console.log("üîä Bot√≥n de prueba:", testButton ? "‚úÖ Encontrado" : "‚ùå No encontrado");
}

// Funci√≥n para limpiar pedidos de prueba
function limpiarPedidosPrueba() {
  console.log("üßπ Limpiando pedidos de prueba...");
  
  const restauranteId = localStorage.getItem("restauranteId");
  if (!restauranteId) {
    console.error("‚ùå No se encontr√≥ restauranteId");
    return;
  }

  // Obtener todos los pedidos
  fetch(`/api/pedidos-cocina?restauranteId=${restauranteId}`)
    .then(response => response.json())
    .then(pedidos => {
      const pedidosPrueba = pedidos.filter(pedido => 
        pedido.mesa === "MESA PRUEBA" || 
        pedido.cliente === "Cliente de Prueba"
      );
      
      console.log(`üóëÔ∏è Encontrados ${pedidosPrueba.length} pedidos de prueba para eliminar`);
      
      // Nota: La API actual no tiene DELETE, pero podemos marcarlos como "realizado"
      pedidosPrueba.forEach(pedido => {
        fetch("/api/pedidos-cocina", {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            restauranteId: restauranteId,
            pedidoId: pedido.id,
            nuevoEstado: "realizado"
          }),
        })
        .then(() => console.log(`‚úÖ Pedido ${pedido.id} marcado como realizado`))
        .catch(error => console.error(`‚ùå Error eliminando pedido ${pedido.id}:`, error));
      });
    })
    .catch(error => {
      console.error("‚ùå Error obteniendo pedidos:", error);
    });
}

// Funci√≥n para probar el sonido manualmente
function probarSonido() {
  console.log("üîä Probando sonido manualmente...");
  
  // Buscar el bot√≥n de prueba y hacer clic
  const testButton = Array.from(document.querySelectorAll('button')).find(btn => 
    btn.textContent.includes('Probar Sonido')
  );
  
  if (testButton) {
    testButton.click();
    console.log("‚úÖ Clic en bot√≥n de prueba realizado");
  } else {
    console.log("‚ùå No se encontr√≥ el bot√≥n de prueba");
  }
}

// Funci√≥n para verificar la conexi√≥n SSE
function verificarConexionSSE() {
  console.log("üì° Verificando conexi√≥n SSE...");
  
  const restauranteId = localStorage.getItem("restauranteId");
  if (!restauranteId) {
    console.error("‚ùå No se encontr√≥ restauranteId");
    return;
  }

  // Intentar conectar al endpoint SSE
  const eventSource = new EventSource(`/api/pedidos-cocina/events?restauranteId=${restauranteId}`);
  
  eventSource.onopen = () => {
    console.log("‚úÖ Conexi√≥n SSE establecida correctamente");
  };
  
  eventSource.onmessage = (event) => {
    try {
      const data = JSON.parse(event.data);
      console.log("üì® Mensaje SSE recibido:", data);
    } catch (error) {
      console.error("‚ùå Error parseando mensaje SSE:", error);
    }
  };
  
  eventSource.onerror = (error) => {
    console.error("‚ùå Error en conexi√≥n SSE:", error);
  };
  
  // Cerrar conexi√≥n despu√©s de 5 segundos
  setTimeout(() => {
    eventSource.close();
    console.log("üîå Conexi√≥n SSE de prueba cerrada");
  }, 5000);
}

// Funci√≥n para mostrar ayuda
function mostrarAyuda() {
  console.log(`
üß™ SISTEMA DE PRUEBAS DE NOTIFICACIONES DE COCINA EN TIEMPO REAL

Comandos disponibles:

1. simularNuevoPedido()     - Crea un pedido de prueba para activar notificaci√≥n instant√°nea
2. verificarEstadoSistema() - Verifica el estado actual del sistema
3. verificarConexionSSE()   - Prueba la conexi√≥n SSE directamente
4. limpiarPedidosPrueba()   - Limpia pedidos de prueba creados
5. probarSonido()          - Prueba el sonido manualmente
6. mostrarAyuda()          - Muestra esta ayuda

Para usar:
1. Abrir la consola del navegador (F12)
2. Ir a la p√°gina de cocina
3. Ejecutar los comandos deseados

Ejemplo:
> verificarEstadoSistema()
> verificarConexionSSE()
> simularNuevoPedido()

NOTA: El sistema ahora usa Server-Sent Events (SSE) para notificaciones instant√°neas.
Las notificaciones deber√≠an aparecer inmediatamente al crear un pedido.
  `);
}

// Mostrar ayuda al cargar
mostrarAyuda();

// Exportar funciones para uso global
window.testKitchenNotifications = {
  simularNuevoPedido,
  verificarEstadoSistema,
  verificarConexionSSE,
  limpiarPedidosPrueba,
  probarSonido,
  mostrarAyuda
};

console.log("‚úÖ Script de pruebas cargado. Usa testKitchenNotifications.mostrarAyuda() para ver comandos disponibles.");
